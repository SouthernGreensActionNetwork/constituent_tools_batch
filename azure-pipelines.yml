# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: PodmanAgents
variables:
  - name: containerPath
    value: sgan/containers/core
  - group: DigitalOcean
  - group: usvoters_pg
resources:
  containers:
    - container: constituent_tools
      image: registry.gitlab.com/sgan/containers/core/gulfcoastgreens/constituent_tools_container:latest
      endpoint: gl_registry
      # options: --dns 192.168.1.1
      env:
        PG_DATABASE: $(PG_DATABASE)
        PG_HOST: $(PG_HOST)
        PG_PASSWORD: $(PG_PASSWORD)
        PG_PORT: $(PG_PORT)
stages:
  - stage: RunConstituentToolsBatch
    displayName: Run Constituent Tools Batch
    jobs:
      - job: 
        pool: PodmanAgents
        displayName: Run Constituent Tools Batch
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'gl_registry'
              command: 'login'
            displayName: Login to registry    
          - task: Docker@2
            displayName: run
            inputs:
              containerRegistry: gl_registry
              repository: sgan/containers/core/jamjon3/kube_portforward_service:latest
              command: run
              arguments: --rm --network=host -d
      - deployment: RunConstituentToolsBatch
        displayName: Run Constituent Tools Batch
        environment: digitalocean
        pool: PodmanAgents
        container: constituent_tools
        services:
          mysqlforward:
            image: registry.gitlab.com/sgan/containers/core/jamjon3/kube_portforward_service:latest
            endpoint: gl_registry
            # ports:
            # - localhost:3306:0.0.0.0:3306          
            env:
              DIGITALOCEAN_ACCESS_TOKEN: $(DIGITALOCEAN_ACCESS_TOKEN)
        strategy:
          runOnce:
            deploy:
              steps:
                - template: .template.yml
